/**
 * Systemtap probes for the nfs (server side) file systems. Code here is
 * borrowed from systemtap tapset. For a reason I dont understand why, my scripts
 * cannot see the most of nfsd tapset variables, so I need my own version.
 * I advice one to try tapset nfsd.stp before.
 *
 * Copyright (C) 2013 Thiago Emmanuel Pereira - thiagoepdc@lsd.ufcg.edu.br
 * Copyright (C) 2013 Universidade Federal de Campina Grande
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#FIXME: return values ?
global elapsed

probe begin {
    printf("system start %d\n", gettimeofday_us());
}

probe end {
    printf("system finish %d\n", gettimeofday_us());
}

function proc:string() {
    return sprintf("%d %d %d (%s)", uid(), pid(), tid(), execname())
}

function now() {
    return gettimeofday_us();
}

probe nfsd.lookup {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.lookup.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.34#L250
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.32#L240
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L246
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry

    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%d> <%d> <%d>\n",
	   proc(), probefunc(), dfhfull, begin, end, end - begin)
}

function __complete_path:string(dentry:long) {
    parent = @cast(dentry, "dentry")->d_parent;
    return sprintf("%s/%s", reverse_path_walk(parent), d_name(dentry));
}

probe nfsd.write {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.write.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.34#L1119
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.32#L1123
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L1112
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry

    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, kernel_int($cnt), $offset,
	   kernel_int($stablep), begin, end, end - begin)
}

probe nfsd.read {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.read.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.34#L1090
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L1050
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry

    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, kernel_int($count), $offset,
	   $vlen, begin, end, end - begin)
}

probe nfsd.close {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.close.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L800
    //FIXME did not receive a close, we miss a test to this probe
    end = now()
    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%d> <%d> <%d>\n",
           proc(), probefunc(), __file_filename($filp), begin, end, end - begin)
}

probe nfsd.rename {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.rename.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L1769
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L1720
    end = now()
    dfh = @cast($ffhp, "svc_fh")->fh_dentry
    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    dtfh = @cast($tfhp, "svc_fh")->fh_dentry
    dtfhfull = "null"
    if (dtfh) {
        dtfhfull = __complete_path(dtfh)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%s> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, dtfhfull, begin, end, end - begin)
}

probe nfsd.unlink {
    #NFS server removing a file or a directory for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.unlink.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L1824
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry
    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    filename = kernel_string_n($fname, $flen)

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%s> <%s> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, filename, ftype($type),
	   begin, end, end - begin)
}

#FIXME: we are missing $type in open calls
probe nfsd.open {
    #NFS server opening a file for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.open.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L773
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L733
    end = now()
    fhp =  @cast($fhp, "svc_fh")->fh_dentry
    fhpfull = "null"
    if (fhp) {
        fhpfull = __complete_path(fhp)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    
    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), fhpfull, $access, begin, end, end - begin)
}

#FIXME: iap has another field. include them?
probe nfsd.create {
    #probe::nfsd.create â€” NFS server creating a file(regular,dir,device,fifo) for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.create.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L1269
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=3.2#L1228
    #iapp struct -> http://lxr.free-electrons.com/source/include/linux/fs.h?v=3.2#L462
    end = now()
    fhp =  @cast($fhp, "svc_fh")->fh_dentry
    fhpfull = "null"
    if (fhp) {
        fhpfull = __complete_path(fhp)
    }

    filename = kernel_string_n($fname, $flen)
    iap_valid = $iap->ia_valid
    iap_mode = $iap->ia_mode

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    printf("<%s> <%s> <%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), fhpfull, filename, ftype($type), iap_valid,
	   iap_mode, begin, end, end - begin)
}

probe nfsd.commit {
    #NFS server committing all pending writes to stable storage
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.commit.return {
    #http://lxr.free-electrons.com/ident?v=2.6.34;i=nfsd_commit
    #http://lxr.free-electrons.com/ident?v=3.2;i=nfsd_commit
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry
    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    #FIXME: we got some kernel faults wheen reading this, so I will skip
    #this by now
    #flag = $fhp->fh_export->ex_flags

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    #FIXME: kernel_int() for count and offset ? we have 0 and 0

    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, $count, $offset,
	   begin, end, end - begin)
}

/*
probe nfsd.createv3 {
    #NFS server creating a regular file or set file attributes for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.createv3.return {
    end = now()
    dfh =  @cast($fhp, "svc_fh")->fh_dentry
    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    filename = kernel_string_n($fname, $flen)
    iap_valid = $iap->ia_valid
    iap_mode = $iap->ia_mode

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]

    #FIXME: should we use kernel_int ?

    printf("<%s> <%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, filename, iap_valid, iap_mode, $truncp,
	   $verifier, $createmode, begin, end, end - begin)
}*/

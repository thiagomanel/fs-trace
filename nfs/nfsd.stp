/**
 * Systemtap probes for the nfs (server side) file systems. Code here is
 * borrowed from systemtap tapset. For a reason I dont understand why, my scripts
 * cannot see the most of nfsd tapset variables, so I need my own version.
 * I advice one to try tapset nfsd.stp before.
 *
 * Copyright (C) 2013 Thiago Emmanuel Pereira - thiagoepdc@lsd.ufcg.edu.br
 * Copyright (C) 2013 Universidade Federal de Campina Grande
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

//FIXME: we should track nfsd or proc ? or both ?

/** elapsed time map */
global elapsed

probe begin {
    printf("system start %d\n", gettimeofday_us());
}

probe end {
    printf("system finish %d\n", gettimeofday_us());
}

function proc:string() {
    return sprintf("%d %d %d (%s)", uid(), pid(), tid(), execname())
}

function now() {
    return gettimeofday_us();
}

probe nfsd.proc4.lookup {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.proc4.lookup.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/nfs4proc.c#L750
    h = & @cast($cstate, "nfsd4_compound_state", "kernel:nfsd")->current_fh
    d =  @cast(h, "svc_fh")->fh_dentry

    dfull = "null"
    if (d) {
        dfull = __complete_path(d)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d>\n",
	   proc(), probefunc(), dfull, begin, delta)
}

function __complete_path:string(dentry:long) {
    parent = @cast(dentry, "dentry")->d_parent;
    return sprintf("%s/%s", reverse_path_walk(parent), d_name(dentry));
}

probe nfsd.proc4.write {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.proc4.write.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/nfs4proc.c#L987
    h = & @cast($cstate, "nfsd4_compound_state", "kernel:nfsd")->current_fh
    d =  @cast(h, "svc_fh")->fh_dentry

    dfull = "null"
    if (d) {
        dfull = __complete_path(d)
    }

    count = $write->wr_buflen
    offset = $write->wr_offset
    stable = $write->wr_stable_how

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfull, count, offset, stable, begin, delta)
}

#FIXME: i did not see any call to nfsd.read
probe nfsd.read {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.read.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c?v=2.6.34#L1090
    dfh =  @cast($fhp, "svc_fh")->fh_dentry

    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    //count = $
    //offset = $write->wr_offset
    //stable = $write->wr_stable_how

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, $count, $offset, $vec, $vlen, begin,
	   delta)
}

probe nfsd.close {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.close.return {
    //FIXME did not receive a close, we miss a test to this probe
    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d>\n",
           proc(), probefunc(), __file_filename($filp), begin, delta)
}

probe nfsd.rename {
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.rename.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L1769
    dfh =  @cast($ffhp, "svc_fh")->fh_dentry
    dtfh =  @cast($tfhp, "svc_fh")->fh_dentry

    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, begin, delta)
}

probe nfsd.unlink {
    #NFS server removing a file or a directory for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.unlink.return {
    dfh =  @cast($fhp, "svc_fh")->fh_dentry
    dfhfull = "null"
    if (dfh) {
        dfhfull = __complete_path(dfh)
    }

    filelen = $flen
    filename = kernel_string_n($fname, $flen)
    type = $type

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%s> <%d> <%d> <%d>\n",
           proc(), probefunc(), dfhfull, filename, type, begin, delta)
}

probe nfsd.open {
    #NFS server opening a file for client
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.open.return {
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L773

    fhp =  @cast($fhp, "svc_fh")->fh_dentry
    fhpfull = "null"
    if (fhp) {
        fhpfull = __complete_path(fhp)
    }

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%d> <%d> <%d>\n",
           proc(), probefunc(), fhpfull, $may_flags, begin, delta)
}

probe nfsd.create {
    #probe::nfsd.create — NFS server creating a file(regular,dir,device,fifo) for client
    #http://lxr.free-electrons.com/source/fs/nfsd/vfs.c#L1269
    elapsed[tid(), probefunc()] = now()
}
probe nfsd.create.return {
    fhp =  @cast($fhp, "svc_fh")->fh_dentry
    fhpfull = "null"
    if (fhp) {
        fhpfull = __complete_path(fhp)
    }

    filename = kernel_string_n($fname, $flen)
    iap_valid = $iap->ia_valid
    iap_mode = $iap->ia_mode

    begin = elapsed[tid(), probefunc()]
    delete elapsed[tid(), probefunc()]
    delta = now() - begin

    printf("<%s> <%s> <%s> <%s> <%s> <%d> <%d> <%d> <%d>\n",
           proc(), probefunc(), fhpfull, filename, ftype($type), iap_valid,
	   iap_mode, begin, delta)
}

//FIXME add client ip ?

/**
probe::nfsd.commit — NFS server committing all pending writes to stable storage 
probe::nfsd.createv3 — NFS server creating a regular file or set file attributes for client

probe::nfsd.proc.commit — NFS server performing a commit operation for client
probe::nfsd.proc.read — NFS server reading file for client
probe::nfsd.proc.remove — NFS server removing a file for client

probe::nfsd.unlink — NFS server removing a file or a directory for client
